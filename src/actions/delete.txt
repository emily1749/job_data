// import mockAxios from 'axios';
// import configureMockStore from 'redux-mock-store';
// import thunk from 'redux-thunk';
// import promiseMiddleware from 'redux-promise-middleware';
// import { fetchJobData } from './index';
// import { applyMiddleware, createStore } from 'redux';
// import promise from 'redux-promise-middleware';


// const mockStore = applyMiddleware(promise)(createStore);
// describe('User Actions', () => {
//   let store;

//   beforeEach(() => {
//     store = mockStore({
//       users: {},
//     });
//   });

  describe('getUsers action creator', () => {
    // it('dispatches GET_USERS action and returns data on success', async () => {
    //   mockAxios.get.mockImplementationOnce(() =>
    //     Promise.resolve({
    //       data: [{ id: 1, name: 'Vasilis' }],
    //     })
    //   );

    //   await store.dispatch(fetchJobData());
    //   const actions = store.getActions();
    //   // [ { type: 'GET_USERS_PENDING' },
    //   //   { type: 'GET_USERS_FULFILLED', payload: { data: [Array] } }
    //   // ]

    //   expect.assertions(3);
    //   expect(actions[0].type).toEqual('GET_USERS_PENDING');
    //   expect(actions[1].type).toEqual('GET_USERS_FULFILLED');
    //   expect(actions[1].payload.data[0].name).toEqual('Vasilis');
    });

    // it('tests GET_USERS action and that returns an error', async () => {
    //   mockAxios.get.mockImplementationOnce(() =>
    //     Promise.reject({
    //       error: 'Something bad happened :(',
    //     })
    //   );

    //   try {
    //     await store.dispatch(getUsers());
    //   } catch {
    //     const actions = store.getActions();

    //     expect.assertions(3);
    //     expect(actions[0].type).toEqual('GET_USERS_PENDING');
    //     expect(actions[1].type).toEqual('GET_USERS_REJECTED');
    //     expect(actions[1].payload.error).toEqual('Something bad happened :(');
    //   }
    // });
  });
});

// import moxios from 'moxios';
// import { storeFactory } from '../test/testUtils';
// import * as actionCreators from './index';

// describe('fetchJobData action creator', () => {
//   beforeEach(() => {
//     moxios.install();
//   });
//   afterEach(() => {
//     moxios.uninstall();
//   });
//   test('test', () => {
//     let test = 'hi';
//     const store = storeFactory();
//     moxios.wait(() => {
//       const request = moxios.requests.mostRecent();
//       request.respondWith({
//         status: 200,
//         response: test,
//       });
//     });

//     return store
//       .dispatch(actionCreators.fetchJobData())
//       .then(() => console.log('Hi'));
//   });
// });

// import mockAxios from 'axios';
// import configureMockStore from 'redux-mock-store';
// import thunk from 'redux-thunk';
// import promiseMiddleware from 'redux-promise-middleware';
// import * as actionCreators from './index';

// import configureStore from 'redux-mock-store';

// const middlewares = [thunk];
// const mockStore = configureStore(middlewares);

// // const mockStore = configureMockStore([thunk, promiseMiddleware()]);

// describe('Actions', () => {
//   let store;

//   beforeEach(() => {
//     store = mockStore({
//       jobData: {},
//     });
//   });

//   describe('fetchJobData action creator', () => {
//     it('dispatches STORE_VALUE action and returns data on success', async () => {
//       mockAxios.get.mockImplementationOnce(() => {
//         Promise.resolve({
//           data: [
//             {
//               TypeScript: 10,
//               Ruby: 20,
//               Python: 100,
//             },
//           ],
//         });
//       });

//       await store.dispatch(fetchJobData('city', 'state'));
//       const actions = store.getActions();
//       expect.assertions(3);
//     });
//   });
// });
