import React from 'react';

import mockAxios from 'axios';
import thunk from 'redux-thunk';
import configureStore from 'redux-mock-store';

import moxio from 'moxios';
import {
  fetchJobData,
  setCityLocation,
  setStateLocation,
  setOnSort,
  setBubbleColor,
  setQuickColor,
  setMergeColor,
  //   setlocationSubmitted,
  setButtonColor,
  //   setMessage,
} from './';
import moxios from 'moxios';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

const initialState = {
  jobData: {
    jobDataCopy: [],
    loading: false,
    error: false,
    locationSubmitted: false,
    message: 'Please enter location',
  },
};

describe('fetchJobData action creator', () => {
  // let dispatch;
  const resultArr = [
    {
      JavaScript: 20,
      Python: 30,
    },
  ];
  let store;
  beforeEach(() => {
    // dispatch = jest.fn();
    moxios.install();
    store = mockStore(initialState);
  });
  afterEach(() => {
    moxios.uninstall();
  });

  it('dispatches "STORE_VALUE" action  and returns data on success', async () => {
    moxios.wait(() => {
      let request = moxios.requests.mostRecent();
      request.respondWith({
        status: 200,
        response: resultArr,
      });
    });

 
    const result = await fetchJobData('worcester');
    // expect(dispatch).toHaveBeenCalledWith(expect.any(Function));
    return store
      .dispatch(fetchJobData('worcester', 'massachusetts'))
      .then(() => {
        const actualAction = store.getActions();
        expect(actualAction).toEqual(expectedActions);
        // expect(actualAction).toEqual('hi');
        console.log('here');
        done();
      });
  });
});

// import React from 'react';
// import renderer from 'react-test-renderer';
// import { Provider } from 'react-redux';
// import configureStore from 'redux-mock-store';
// import thunk from 'redux-thunk';

// import Loading from './Loading';

// const initialState = {
//   jobData: {
//     jobDataCopy: [],
//     loading: false,
//     error: false,
//     locationSubmitted: false,
//     message: 'Please enter location',
//   },
// };

// const middlewares = [thunk];
// const mockStore = configureStore(middlewares);
// const store = mockStore(initialState);

// const setup = props => {
//   return renderer.create(
//     <Provider store={store}>
//       <Loading {...props} />
//     </Provider>
//   );
// };

// describe('Loading Component', () => {
//   let props;

//   beforeEach(() => {
//     props = {
//       jobData: {
//         jobDataCopy: [],
//         loading: false,
//         error: false,
//         locationSubmitted: false,
//         message: 'Please enter location',
//       },
//     };
//   });

//   it('renders', () => {
//     const tree = setup(props);
//     expect(tree.toJSON()).toMatchSnapshot();
//   });


// import mockAxios from 'axios';
// import configureMockStore from 'redux-mock-store';
// import thunk from 'redux-thunk';
// import promiseMiddleware from 'redux-promise-middleware';
// import { fetchJobData } from './index';
// import { applyMiddleware, createStore } from 'redux';
// import promise from 'redux-promise-middleware';


// const mockStore = applyMiddleware(promise)(createStore);
// describe('User Actions', () => {
//   let store;

//   beforeEach(() => {
//     store = mockStore({
//       users: {},
//     });
//   });

  describe('getUsers action creator', () => {
    // it('dispatches GET_USERS action and returns data on success', async () => {
    //   mockAxios.get.mockImplementationOnce(() =>
    //     Promise.resolve({
    //       data: [{ id: 1, name: 'Vasilis' }],
    //     })
    //   );

    //   await store.dispatch(fetchJobData());
    //   const actions = store.getActions();
    //   // [ { type: 'GET_USERS_PENDING' },
    //   //   { type: 'GET_USERS_FULFILLED', payload: { data: [Array] } }
    //   // ]

    //   expect.assertions(3);
    //   expect(actions[0].type).toEqual('GET_USERS_PENDING');
    //   expect(actions[1].type).toEqual('GET_USERS_FULFILLED');
    //   expect(actions[1].payload.data[0].name).toEqual('Vasilis');
    });

    // it('tests GET_USERS action and that returns an error', async () => {
    //   mockAxios.get.mockImplementationOnce(() =>
    //     Promise.reject({
    //       error: 'Something bad happened :(',
    //     })
    //   );

    //   try {
    //     await store.dispatch(getUsers());
    //   } catch {
    //     const actions = store.getActions();

    //     expect.assertions(3);
    //     expect(actions[0].type).toEqual('GET_USERS_PENDING');
    //     expect(actions[1].type).toEqual('GET_USERS_REJECTED');
    //     expect(actions[1].payload.error).toEqual('Something bad happened :(');
    //   }
    // });
  });
});

// import moxios from 'moxios';
// import { storeFactory } from '../test/testUtils';
// import * as actionCreators from './index';

// describe('fetchJobData action creator', () => {
//   beforeEach(() => {
//     moxios.install();
//   });
//   afterEach(() => {
//     moxios.uninstall();
//   });
//   test('test', () => {
//     let test = 'hi';
//     const store = storeFactory();
//     moxios.wait(() => {
//       const request = moxios.requests.mostRecent();
//       request.respondWith({
//         status: 200,
//         response: test,
//       });
//     });

//     return store
//       .dispatch(actionCreators.fetchJobData())
//       .then(() => console.log('Hi'));
//   });
// });

// import mockAxios from 'axios';
// import configureMockStore from 'redux-mock-store';
// import thunk from 'redux-thunk';
// import promiseMiddleware from 'redux-promise-middleware';
// import * as actionCreators from './index';

// import configureStore from 'redux-mock-store';

// const middlewares = [thunk];
// const mockStore = configureStore(middlewares);

// // const mockStore = configureMockStore([thunk, promiseMiddleware()]);

// describe('Actions', () => {
//   let store;

//   beforeEach(() => {
//     store = mockStore({
//       jobData: {},
//     });
//   });

//   describe('fetchJobData action creator', () => {
//     it('dispatches STORE_VALUE action and returns data on success', async () => {
//       mockAxios.get.mockImplementationOnce(() => {
//         Promise.resolve({
//           data: [
//             {
//               TypeScript: 10,
//               Ruby: 20,
//               Python: 100,
//             },
//           ],
//         });
//       });

//       await store.dispatch(fetchJobData('city', 'state'));
//       const actions = store.getActions();
//       expect.assertions(3);
//     });
//   });
// });
