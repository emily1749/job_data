[{"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/index.js":"1","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/App.js":"2","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/index.js":"3","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/Loading.js":"4","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/BarGraph.js":"5","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/onSortReducer.js":"6","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/bubbleColorReducer.js":"7","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/quickColorReducer.js":"8","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/mergeColorReducer.js":"9","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/locationSubmittedReducer.js":"10","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/stateLocationReducer.js":"11","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/cityLocationReducer.js":"12","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/fetchJobDataReducer.js":"13","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/actions/index.js":"14","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/api/jobData.js":"15","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/InfoBox.js":"16","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/Location.js":"17"},{"size":431,"mtime":1607724970000,"results":"18","hashOfConfig":"19"},{"size":19178,"mtime":1607749532000,"results":"20","hashOfConfig":"19"},{"size":992,"mtime":1607749530000,"results":"21","hashOfConfig":"19"},{"size":411,"mtime":1607726022000,"results":"22","hashOfConfig":"19"},{"size":913,"mtime":1607748495000,"results":"23","hashOfConfig":"19"},{"size":159,"mtime":1607724970000,"results":"24","hashOfConfig":"19"},{"size":160,"mtime":1607724970000,"results":"25","hashOfConfig":"19"},{"size":159,"mtime":1607724970000,"results":"26","hashOfConfig":"19"},{"size":159,"mtime":1607724970000,"results":"27","hashOfConfig":"19"},{"size":169,"mtime":1607724970000,"results":"28","hashOfConfig":"19"},{"size":162,"mtime":1607724970000,"results":"29","hashOfConfig":"19"},{"size":161,"mtime":1607724970000,"results":"30","hashOfConfig":"19"},{"size":1555,"mtime":1607724970000,"results":"31","hashOfConfig":"19"},{"size":1798,"mtime":1607724970000,"results":"32","hashOfConfig":"19"},{"size":124,"mtime":1607724970000,"results":"33","hashOfConfig":"19"},{"size":493,"mtime":1607726335000,"results":"34","hashOfConfig":"19"},{"size":2389,"mtime":1607749649000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1uci3tt",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/index.js",[],["72","73"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/App.js",["74","75"],"import React from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n  setOnSort,\n  setBubbleColor,\n  setQuickColor,\n  setMergeColor,\n  setCityLocation,\n  setStateLocation,\n  setMessage,\n  fetchJobData,\n  setButtonColor,\n} from '../actions';\n\nimport Loading from './Loading';\nimport BarGraph from './BarGraph';\nimport InfoBox from './InfoBox';\nimport Location from './Location';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      resultArray: [\n        // ['Typescript', 0.2, 0, 0, 0],\n        // ['Ruby', 1.52, 0, 0, 1],\n        // ['Python', 27.21, 0, 0, 2],\n        // ['C++', 22.84, 0, 0, 3],\n        // ['Golang', 0.4, 0, 0, 9],\n        // ['Swift', 2.34, 0, 0, 4],\n        // ['Javascript', 17.16, 0, 0, 5],\n        // ['PHP', 2.44, 0, 0, 6],\n        // ['Java', 17.56, 0, 0, 7],\n        // ['C#', 8.22, 0, 0, 8],\n      ],\n      initialData: false,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.jobDataCopy !== this.props.jobDataCopy) {\n      this.setState({ resultArray: [...this.props.jobDataCopy] });\n    }\n  }\n\n  resetSort = e => {\n    console.log(this.props.jobDataCopy);\n    let self = this;\n    console.log('on sort reset');\n    if (this.props.onSort === false && this.props.locationSubmitted === true) {\n      let dataArray = [...this.props.jobDataCopy];\n      dataArray.forEach(element => {\n        element[2] = 0;\n      });\n      self.setState({\n        resultArray: dataArray,\n      });\n\n      this.props.setBubbleColor('');\n      this.props.setQuickColor('');\n      this.props.setMergeColor('');\n    }\n  };\n\n  // onCityInputChange = e => this.props.setCityLocation(e.target.value);\n\n  // onStateInputChange = e => this.props.setStateLocation(e.target.value);\n\n  // onSubmit = e => {\n  //   let self = this;\n  //   e.preventDefault();\n\n  //   if (this.props.onSort === false) {\n  //     let city = this.props.cityLocation;\n  //     let state = this.props.stateLocation;\n\n  //     if (city && state) {\n  //       console.log('in here');\n  //       city = city.replace(' ', '+');\n  //       this.props.setMergeColor('');\n  //       this.props.setBubbleColor('');\n  //       this.props.setQuickColor('');\n\n  //       const fetchData = async () => {\n  //         await this.props.fetchJobData(city, state);\n  //       };\n  //       fetchData();\n  //     }\n  //   }\n  // };\n\n  bubbleSort = () => {\n    if (\n      this.props.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      this.props.mergeColor === '' &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      this.props.setBubbleColor('#f08a5d');\n      this.props.setOnSort(true);\n      this.props.setButtonColor('#00587a');\n\n      console.log('on bubblesort');\n\n      let self = this;\n      let count = 0;\n      let round = 0;\n      //flag indicates whether a bar has been swapped during this round\n\n      let flag = true;\n      let endFlag = false;\n\n      let myInterval = setInterval(() => {\n        function swap(input, indexA, indexB) {\n          flag = false;\n          let temp = input[indexA];\n          input[indexA] = input[indexB];\n          input[indexB] = temp;\n          return input;\n        }\n\n        if (endFlag === true || count === 9) {\n          let dataArray = [...this.state.resultArray];\n          if (dataArray[8][1] > dataArray[9][1]) {\n            swap(dataArray, 8, 9);\n          }\n\n          if (round < 9) {\n            dataArray[9 - round][2] = 2;\n            dataArray[9 - round - 1][2] = 0;\n          } else {\n            dataArray[9 - round][2] = 2;\n          }\n\n          self.setState({\n            resultArray: dataArray,\n          });\n          round++;\n          if (flag === true) {\n            let dataArray = [...this.state.resultArray];\n            //Update each bar color to green\n            dataArray.forEach(element => {\n              element[2] = 2;\n            });\n            this.props.setOnSort(false);\n            this.props.setButtonColor('#fff');\n            clearInterval(myInterval);\n          } else {\n            count = 0;\n            flag = true;\n          }\n          endFlag = false;\n          return;\n        } else {\n          let dataArray = [...self.state.resultArray];\n          if (count === 0) {\n            //if first count, have to color first two yellow\n            dataArray[0][2] = 1;\n            dataArray[1][2] = 1;\n            self.setState({\n              resultArray: dataArray,\n            });\n            count++;\n          } else {\n            if (dataArray[count - 1][1] > dataArray[count][1]) {\n              swap(dataArray, count - 1, count);\n              self.setState({\n                resultArray: dataArray,\n              });\n            } else {\n              if (dataArray[count + 1][2] !== 2) {\n                //if the next one isn't green/already sorted, continue\n                dataArray[count - 1][2] = 0;\n                dataArray[count + 1][2] = 1;\n                self.setState({\n                  resultArray: dataArray,\n                });\n              } else if (dataArray[count + 1][2] === 2) {\n                endFlag = true;\n              }\n              count++;\n            }\n          }\n        }\n      }, 140);\n    }\n  };\n\n  quickSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      this.props.mergeColor === '' &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      this.props.setQuickColor('#f08a5d');\n      this.props.setOnSort(true);\n      this.props.setButtonColor('#00587a');\n      console.log('on quicksort');\n\n      let self = this;\n\n      //https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function swap(input, indexA, indexB) {\n        await sleep(170);\n        let temp = input[indexA];\n        input[indexA] = input[indexB];\n        input[indexB] = temp;\n\n        return input;\n      }\n\n      //changeColors function, enter index to change color and number of color\n      //updates state with the new bar colors\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][2] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      //resets the color of the bar to blue, updates state\n      async function resetColor(endIndex) {\n        let dataArray = self.state.resultArray;\n        dataArray[endIndex][2] = 0;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(0.1);\n      }\n\n      async function getPivotIndex(array, startIndex, endIndex) {\n        let pivotValue = array[endIndex][1];\n\n        let pivotIndex = startIndex;\n        await changeColors(endIndex, 3);\n\n        for (let i = startIndex; i < endIndex; i++) {\n          let startPivotIndex = pivotIndex;\n\n          //changes bar colors\n          await Promise.all([changeColors(i, 2), changeColors(pivotIndex, 1)]);\n\n          if (array[i][1] < pivotValue) {\n            if (i === pivotIndex) {\n              //if on first index, reset the color and increase pivot index\n\n              await resetColor(i);\n              pivotIndex++;\n            } else {\n              //change colors if not on the first index\n              //change to red\n\n              await Promise.all([\n                changeColors(i, 4),\n                changeColors(pivotIndex, 4),\n              ]);\n              await swap(array, i, pivotIndex);\n\n              //after swap, update colors\n              await Promise.all([\n                changeColors(i, 2),\n                changeColors(pivotIndex, 2),\n              ]);\n\n              //reset the colors after and increase pivot index\n              await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n              pivotIndex++;\n            }\n          }\n\n          //reset colors before returning pivot index\n          if (startPivotIndex !== pivotIndex) {\n            await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n          } else {\n            await resetColor(i);\n          }\n        }\n\n        if (pivotIndex !== endIndex) {\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await swap(array, pivotIndex, endIndex);\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await Promise.all([resetColor(pivotIndex), resetColor(endIndex)]);\n        }\n\n        //return the pivot index\n        return pivotIndex;\n      }\n\n      async function quickSortAlgorithm(array, startingIndex, endingIndex) {\n        if (startingIndex > endingIndex) {\n          return;\n        } else {\n          let index = await getPivotIndex(array, startingIndex, endingIndex);\n\n          await Promise.all([\n            quickSortAlgorithm(array, startingIndex, index - 1),\n            quickSortAlgorithm(array, index + 1, endingIndex),\n          ]);\n        }\n      }\n\n      let dataArray = this.state.resultArray;\n      await quickSortAlgorithm(dataArray, 0, 9).then(async () => {\n        //pause, and then change colors to green\n        setTimeout(() => {\n          dataArray.forEach((bar, barIndex) => {\n            bar[2] = 2;\n          });\n          this.props.setOnSort(false);\n          this.props.setButtonColor('#fff');\n        }, 170);\n      });\n    }\n  };\n\n  mergeSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      this.props.mergeColor === '' &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      this.props.setOnSort(true);\n      this.props.setMergeColor('#f08a5d');\n      this.props.setButtonColor('#00587a');\n      console.log('on mergesort');\n\n      let self = this;\n\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][2] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n        await sleep(170);\n      }\n\n      async function changeSingleColor(item, number) {\n        let dataArray = self.state.resultArray;\n\n        //find where the item is in dataArray\n        let index = dataArray.indexOf(item);\n        dataArray[index][2] = number;\n\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      async function mergeSortAlgorithm(array) {\n        if (array.length <= 1) {\n          return array;\n        }\n\n        let middlePoint = Math.floor(array.length / 2),\n          leftArray = await mergeSortAlgorithm(array.slice(0, middlePoint)),\n          rightArray = await mergeSortAlgorithm(array.slice(middlePoint));\n\n        let mergeResult = await merge(leftArray, rightArray);\n\n        return mergeResult;\n      }\n\n      async function merge(arrayA, arrayB) {\n        if (arrayA.length > 0 && arrayB.length > 0) {\n          let arrayAIndex = arrayA[0][0];\n          let lengthTotal = arrayA.length + arrayB.length;\n          let sorted = [];\n          let dataArray = self.state.resultArray;\n          let dataArrayCopy = dataArray;\n          let indexA = 0;\n\n          //identify first where we are in dataArray, set it to be indexA\n          dataArray.forEach((element, index) => {\n            if (element[0] === arrayAIndex) {\n              indexA = index;\n              return;\n            }\n          });\n\n          //change the color of arrays so we can identify the left from right\n          //arrayA = yellow, arrayB = purple\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 1);\n            }),\n          ]);\n          await Promise.all([\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 3);\n            }),\n          ]);\n\n          await sleep(370);\n          while (arrayA.length && arrayB.length) {\n            let dataArray = self.state.resultArray;\n            let dataArrayCopy = dataArray;\n\n            await Promise.all([\n              changeSingleColor(arrayA[0], 4),\n              changeSingleColor(arrayB[0], 4),\n            ]);\n\n            if (arrayA[0][1] < arrayB[0][1]) {\n              sorted.push(arrayA.shift());\n            } else {\n              sorted.push(arrayB.shift());\n            }\n\n            let resultMergeArray = sorted.concat(\n              arrayA.slice().concat(arrayB.slice())\n            );\n\n            //merge the sorte with the entire dataArray\n            let resultMergeReturn = dataArray\n              .slice(0, indexA)\n              .concat(resultMergeArray)\n              .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n\n            self.setState({\n              resultArray: resultMergeReturn,\n            });\n\n            //change colors for the next loop\n\n            await Promise.all([\n              arrayA.forEach((element, index) => {\n                changeSingleColor(element, 1);\n              }),\n            ]);\n            await Promise.all([\n              arrayB.forEach((element, index) => {\n                changeSingleColor(element, 3);\n              }),\n            ]);\n          }\n\n          //create new updated array\n          let resultMergeArray = sorted.concat(\n            arrayA.slice().concat(arrayB.slice())\n          );\n\n          let resultMergeReturn = dataArray\n            .slice(0, indexA)\n            .concat(resultMergeArray)\n            .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n          self.setState({\n            resultArray: resultMergeReturn,\n          });\n\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            sorted.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n          ]);\n\n          return resultMergeArray;\n        } else {\n          return;\n        }\n      }\n\n      let dataArray = self.state.resultArray;\n      dataArray = await mergeSortAlgorithm(dataArray);\n\n      //update all bar colors to green at end\n      await Promise.all([\n        dataArray.forEach((element, index) => {\n          changeColors(index, 2);\n        }),\n      ]);\n      this.props.setOnSort(false);\n      this.props.setButtonColor('#fff');\n    }\n  };\n\n  updateGraph = arr => {\n    console.log('Before' + this.state.resultArray);\n    console.log('updategraph');\n    this.setState({\n      resultArray: arr,\n    });\n\n    console.log('after' + this.state.resultArray);\n  };\n\n  render() {\n    console.log('RERENDERED');\n    console.log(this.props.loading);\n    const { city, state } = this.state;\n    var self = this;\n    return (\n      <div className='container'>\n        <div className='controls-container'>\n          <div className='controls'>\n            <InfoBox />\n            <Location />\n            {/* <div>\n              <div>\n                <h2>Location</h2>\n              </div>\n\n              <form onSubmit={this.onSubmit}>\n                <div className='location-container'>\n                  <div>\n                    <label>City:</label>\n\n                    <input\n                      type='text'\n                      name='city'\n                      className='input-text'\n                      value={city}\n                      onChange={this.onCityInputChange}\n                    />\n                  </div>\n\n                  <div>\n                    <label>State:</label>\n\n                    <input\n                      type='text'\n                      name='state'\n                      className='input-text'\n                      value={state}\n                      onChange={this.onStateInputChange}\n                    />\n                  </div>\n\n                  <div>\n                    <div className='buttonHolder'>\n                      <button\n                        className='btn'\n                        style={{ color: this.props.buttonColor }}\n                      >\n                        Submit Location\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div> */}\n\n            <div className='algorithms-container'>\n              <div>\n                <h2>Sorting Algorithm</h2>\n              </div>\n              <div>\n                <button\n                  onClick={self.bubbleSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.bubbleColor }}\n                >\n                  Bubble Sort\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={self.quickSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.quickColor }}\n                >\n                  Quick Sort\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={self.mergeSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.mergeColor }}\n                >\n                  Merge Sort\n                </button>\n              </div>\n\n              <div className='buttonHolder'>\n                <button\n                  className='btn'\n                  style={{ color: this.state.buttonColor }}\n                  onClick={self.resetSort}\n                >\n                  Reset Sort\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className='barGraph-container'>\n          {this.props.locationSubmitted === false ||\n          this.props.error === true ? (\n            // ||\n            // (this.props.locationSubmitted === true &&\n            //   this.props.loading === true)\n            <Loading\n              loading={this.props.loading}\n              message={this.props.message}\n            />\n          ) : (\n            <BarGraph resultArray={this.state.resultArray} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    onSort: state.onSort,\n    bubbleColor: state.bubbleColor,\n    quickColor: state.quickColor,\n    mergeColor: state.mergeColor,\n    cityLocation: state.cityLocation,\n    stateLocation: state.stateLocation,\n    message: state.message,\n    loading: state.jobData.loading,\n    jobDataCopy: state.jobData.jobDataCopy,\n    error: state.jobData.error,\n    locationSubmitted: state.jobData.locationSubmitted,\n    // resultArray: state.jobData.resultArray,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setOnSort,\n  setBubbleColor,\n  setMergeColor,\n  setQuickColor,\n  setCityLocation,\n  setStateLocation,\n  setMessage,\n  fetchJobData,\n  setButtonColor,\n  // setResultArray,\n})(App);\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/Loading.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/BarGraph.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/onSortReducer.js",["76"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/bubbleColorReducer.js",["77"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/quickColorReducer.js",["78"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/mergeColorReducer.js",["79"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/locationSubmittedReducer.js",["80"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/stateLocationReducer.js",["81"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/cityLocationReducer.js",["82"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/reducers/fetchJobDataReducer.js",["83"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/actions/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/api/jobData.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/InfoBox.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_12_11/src/components/Location.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":524,"column":13,"nodeType":"90","messageId":"91","endLine":524,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":524,"column":19,"nodeType":"90","messageId":"91","endLine":524,"endColumn":24},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":9,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":1,"column":1,"nodeType":"95","endLine":8,"endColumn":3},{"ruleId":"93","severity":1,"message":"94","line":9,"column":1,"nodeType":"95","endLine":65,"endColumn":3},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'city' is assigned a value but never used.","Identifier","unusedVar","'state' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]